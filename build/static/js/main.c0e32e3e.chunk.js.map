{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","class","backgroundColor","transition","value","rows","onChange","event","target","placeholder","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","App","setAlert","message","setTimeout","setMode","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c0e32e3e.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    \r\n    return (\r\n        <div>\r\n            <nav className= {`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"#\">About</a>\r\n        </li>\r\n        \r\n        \r\n      </ul>\r\n      {/* dark mode enabler here ========================>>>>>>  */}\r\n      <div className=\"form-check form-switch\">\r\n  <input onClick={props.toggleMode} className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className={`form-check-label text-${props.mode==='light'?'dark':'light'}`} htmlFor=\"flexSwitchCheckDefault\">{props.mode==='light'?'Enable':'Disable'} Dark Mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps ={\r\n    title: 'TextUtils'\r\n    \r\n}","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  const handleUpClick = ()=> {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert('Converted to Upper case','success')\r\n    \r\n  }\r\n  const handleLoClick = ()=> {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert('Converted to Lower case','success')\r\n\r\n  }\r\n  const handleClearText = ()=> {\r\n    setText(\"\");\r\n    props.showAlert('Text has been cleared','success')\r\n\r\n  }\r\n  const handleCopyText = ()=> {\r\n    let text = document.getElementById(\"mybox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert('Text has been copied','success')\r\n\r\n  }\r\n  const handleExtraSpace = ()=> {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert('Extra spaces are removed.','success')\r\n\r\n  }\r\n  const [text, setText] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container m-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n        <h1>{props.title}</h1>\r\n        <div class=\"mb-3\">\r\n          <textarea\r\n            style={{backgroundColor: props.mode==='dark'?'#011d6b':'white',\r\n            color: props.mode==='light'?'black':'white',\r\n        \r\n    transition: ' 0.6s all'}}\r\n            value={text}\r\n            class=\"form-control\"\r\n            id=\"mybox\"\r\n            rows=\"10\"\r\n            onChange={handleOnChange}\r\n            placeholder='Enter your text...'\r\n          ></textarea>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary mx-2 my-3\"\r\n            onClick={handleUpClick}\r\n          >\r\n            Upper Case\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-warning my-3\"\r\n            onClick={handleLoClick}\r\n          >\r\n            Lower Case\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-info mx-2 my-3\"\r\n            onClick={handleCopyText}\r\n          >\r\n            Copy Text\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-light my-3\"\r\n            onClick={handleExtraSpace}\r\n          >\r\n            Remove Extra Spaces\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-danger mx-2 my-3\"\r\n            onClick={handleClearText}\r\n          >\r\n            Clear Text\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n        <h2 className=\"my-2\">Your text summary</h2>\r\n        <p>{`${text.split(\" \").length} words, and ${text.length} characters`}</p>\r\n        <p>{0.008*text.split(\" \").length} minutes to read</p>\r\n\r\n        <h3>Preview</h3>\r\n        <p>{text.length>0?text:'Enter something in the box to preview.'}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n    }\r\n  return (\r\n    \r\n      props.alert && <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n      </div>\r\n    \r\n  );\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n\n\nfunction App() {\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n\n  const [mode, setMode] = useState('light');\n  const toggleMode =()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#011d6b';\n      document.body.style.transition = '0.6s all';\n      showAlert(\"Dark mode has been enabled\", 'success')\n  }\n    else{setMode('light');\n    document.body.style.backgroundColor = 'white';\n    document.body.style.transition = '0.6s all';\n    showAlert(\"Light mode has been enabled\", 'success')}\n  }\n  return (\n    <>\n    <Navbar mode={mode} toggleMode={toggleMode}/>\n    <Alert alert = {alert} />\n    <TextForm showAlert={showAlert} title=\"Enter the text below to analyze\" mode={mode} />\n    {/* <About/> */}\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}